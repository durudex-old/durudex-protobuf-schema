// Copyright Â© 2022 Durudex
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

syntax = "proto3";

package durudex.v1;

// UserService service stores methods for working with the user service.
service UserService {
  // CreateUser method creates a new user on the Durudex network.
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);

  // GetUser method returns all the user's data.
  rpc GetUser(GetUserRequest) returns (GetUserResponse);

  // CheckUser method checks the user by credentials.
  rpc CheckUser(CheckUserRequest) returns (CheckUserResponse);
}

// UserLoginType enumeration stores all user login types.
enum UserLoginType {
  USER_LOGIN_TYPE_UNSPECIFIED = 0;

  // USER_LOGIN_TYPE_ID user login type used to indicate the ID value.
  USER_LOGIN_TYPE_ID = 1;

  // USER_LOGIN_TYPE_USERNAME user login type used to indicate the username value.
  USER_LOGIN_TYPE_USERNAME = 2;

  // USER_LOGIN_TYPE_EMAIL user login type used to indicate the email address value.
  USER_LOGIN_TYPE_EMAIL = 3;
}

// UserLogin message stores the user's login.
message UserLogin {
  // `login_type` field stores the user's login type.
  UserLoginType login_type = 1;

  oneof login {
    // `bytes_value` field stores the user login value in bytes.
    bytes bytes_value = 2;

    // `string_value` field stores the user login value in string.
    string string_value = 3;
  }
}

// CreateUserRequest request message of the CreateUser method.
message CreateUserRequest {
  // `username` field stores the unique username that will be used to create a new user.
  optional string username = 1;

  // `name` field stores the name that will be used to create a new user.
  string name = 2;

  // `email` field stores the unique email address that will be used to create a new user.
  string email = 3;
}

// CreateUserResponse response message of the CreateUser method.
message CreateUserResponse {
  // `id` field stores the KSUID of the newly created user.
  bytes id = 1;
}

// GetUserRequest request message of the GetUser method.
message GetUserRequest {
  // `login` field stores the user's login, which will be used to obtain the user's data.
  UserLogin login = 1;
}

// GetUserResponse response message of the GetUser method.
message GetUserResponse {
  // `id` field stores the KSUID user ID.
  bytes id = 1;

  // `username` field stores the username on the Durudex network.
  optional string username = 2;

  // `name` field stores the full name of the user.
  string name = 3;

  // `email` field stores the user's email address.
  string email = 4;

  // `verified` field stores the user's verification status.
  bool verified = 5;

  // `avatar_url` field stores a url to the user's avatar.
  optional string avatar_url = 6;
}

// CheckUserRequest request message of the CheckUser method.
message CheckUserRequest {
  // `login` field stores the user's login, according to which the user will be checked.
  UserLogin login = 1;
}

// CheckUserResponse response message of the CheckUser method.
message CheckUserResponse {}
